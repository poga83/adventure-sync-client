class MapManager {
    constructor(app) {
        this.app = app;
        this.map = null;
        this.userLocationMarker = null;
        this.watchId = null;
    }
    
    initialize() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
        this.map = L.map('map').setView(CONFIG.MAP.DEFAULT_CENTER, CONFIG.MAP.DEFAULT_ZOOM);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ—è —Ç–∞–π–ª–æ–≤
        L.tileLayer(CONFIG.MAP.TILE_LAYER, {
            attribution: CONFIG.MAP.ATTRIBUTION,
            maxZoom: 19
        }).addTo(this.map);
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.requestUserLocation();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
        this.map.on('click', (e) => {
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø–æ –∫–ª–∏–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
        });
        
        return this.map;
    }
    
    requestUserLocation() {
        if ('geolocation' in navigator) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    const userPosition = [position.coords.latitude, position.coords.longitude];
                    this.updateUserLocation(userPosition);
                    this.startWatchingUserLocation();
                },
                (error) => {
                    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                    this.app.notificationManager.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ', 'error');
                }
            );
        } else {
            this.app.notificationManager.showNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º', 'error');
        }
    }
    
    startWatchingUserLocation() {
        if ('geolocation' in navigator) {
            this.watchId = navigator.geolocation.watchPosition(
                (position) => {
                    const userPosition = [position.coords.latitude, position.coords.longitude];
                    this.updateUserLocation(userPosition);
                },
                (error) => {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
                },
                { enableHighAccuracy: true }
            );
        }
    }
    
    stopWatchingUserLocation() {
        if (this.watchId !== null) {
            navigator.geolocation.clearWatch(this.watchId);
            this.watchId = null;
        }
    }
    
    updateUserLocation(position) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        this.app.connectionManager.updateUserPosition(position);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç–µ
        if (!this.userLocationMarker) {
            // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
            this.userLocationMarker = L.marker(position, {
                icon: L.divIcon({
                    className: 'user-marker user-' + this.app.connectionManager.getUserData().status,
                    html: 'üë§',
                    iconSize: [30, 30]
                })
            }).addTo(this.map);
        } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ä–∫–µ—Ä–∞
            this.userLocationMarker.setLatLng(position);
        }
        
        // –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.map.setView(position, this.map.getZoom());
    }
    
    createRouteToUser(userId) {
        const user = this.app.markerManager.getUser(userId);
        if (!user) return;
        
        const userPosition = this.app.connectionManager.getUserData().position;
        
        // –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –≤ RouteManager
        this.app.routeManager.createRoute(userPosition, user.position);
    }
}
