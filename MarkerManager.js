class MarkerManager {
    constructor(app) {
        this.app = app;
        this.userMarkers = new Map(); // –•—Ä–∞–Ω–∏—Ç –º–∞—Ä–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID
        this.users = new Map(); // –•—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏—Ö ID
        this.markerClusterGroup = null;
        this.filteredStatuses = null; // –¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    }
    
    initialize(map) {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä—É–ø–ø—ã –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –º–∞—Ä–∫–µ—Ä–æ–≤
        this.markerClusterGroup = L.markerClusterGroup({
            chunkedLoading: CONFIG.MARKER_CLUSTER.CHUNKED_LOADING,
            spiderfyOnMaxZoom: CONFIG.MARKER_CLUSTER.SPIDERFY_ON_MAX_ZOOM,
            disableClusteringAtZoom: CONFIG.MARKER_CLUSTER.DISABLE_CLUSTERING_AT_ZOOM,
            maxClusterRadius: CONFIG.MARKER_CLUSTER.MAX_CLUSTER_RADIUS,
            zoomToBoundsOnClick: CONFIG.MARKER_CLUSTER.ZOOM_TO_BOUNDS_ON_CLICK,
            showCoverageOnHover: CONFIG.MARKER_CLUSTER.SHOW_COVERAGE_ON_HOVER
        });
        
        map.addLayer(this.markerClusterGroup);
        
        // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–π –∏–∑ –∫—ç—à–∞
        this.restoreFromCache();
        
        return this.markerClusterGroup;
    }
    
    restoreFromCache() {
        const cachedPositions = localStorage.getItem(CONFIG.CACHE.POSITIONS_KEY);
        if (cachedPositions) {
            try {
                const positions = JSON.parse(cachedPositions);
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏–∏, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                positions.forEach(user => {
                    this.addOrUpdateUser(user);
                });
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', e);
            }
        }
    }
    
    updateUsers(users) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        localStorage.setItem(CONFIG.CACHE.POSITIONS_KEY, JSON.stringify(users));
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã
        this.userMarkers.forEach((marker, userId) => {
            this.markerClusterGroup.removeLayer(marker);
        });
        this.userMarkers.clear();
        this.users.clear();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        users.forEach(user => {
            this.addOrUpdateUser(user);
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.filteredStatuses) {
            this.applyActivityFilter(this.filteredStatuses);
        }
    }
    
    addOrUpdateUser(user) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.users.set(user.id, user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ä–∫–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.userMarkers.has(user.id)) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä
            const marker = this.userMarkers.get(user.id);
            marker.setLatLng(user.position);
            marker.setIcon(L.divIcon({
                className: `user-marker user-${user.status}`,
                html: this.getUserIcon(user.status),
                iconSize: [30, 30]
            }));
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–∞—Ä–∫–µ—Ä–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            marker.userStatus = user.status;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
            marker.setPopupContent(this.createPopupContent(user));
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            const marker = L.marker(user.position, {
                icon: L.divIcon({
                    className: `user-marker user-${user.status}`,
                    html: this.getUserIcon(user.status),
                    iconSize: [30, 30]
                })
            }).bindPopup(this.createPopupContent(user));
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∞—Ä–∫–µ—Ä–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            marker.userStatus = user.status;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ –≥—Ä—É–ø–ø—É –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
            this.markerClusterGroup.addLayer(marker);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ä–∫–µ—Ä –≤ Map
            this.userMarkers.set(user.id, marker);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (this.filteredStatuses) {
            this.applyActivityFilter(this.filteredStatuses);
        }
    }
    
    removeUser(userId) {
        if (this.userMarkers.has(userId)) {
            const marker = this.userMarkers.get(userId);
            this.markerClusterGroup.removeLayer(marker);
            this.userMarkers.delete(userId);
        }
        
        this.users.delete(userId);
    }
    
    updateUserStatus(userId, status) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = this.users.get(userId);
        if (user) {
            user.status = status;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
            if (this.userMarkers.has(userId)) {
                const marker = this.userMarkers.get(userId);
                marker.setIcon(L.divIcon({
                    className: `user-marker user-${status}`,
                    html: this.getUserIcon(status),
                    iconSize: [30, 30]
                }));
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–∞—Ä–∫–µ—Ä–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                marker.userStatus = status;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
                marker.setPopupContent(this.createPopupContent(user));
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (this.filteredStatuses) {
                    this.applyActivityFilter(this.filteredStatuses);
                }
            }
        }
    }
    
    updateUserPosition(userId, position) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = this.users.get(userId);
        if (user) {
            user.position = position;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
            if (this.userMarkers.has(userId)) {
                const marker = this.userMarkers.get(userId);
                marker.setLatLng(position);
            }
        }
    }
    
    getUser(userId) {
        return this.users.get(userId);
    }
    
    getUserIcon(status) {
        switch (status) {
            case CONFIG.STATUSES.AVAILABLE:
                return 'üë§';
            case CONFIG.STATUSES.HIKING:
                return 'ü•æ';
            case CONFIG.STATUSES.TRAVELING:
                return 'üöó';
            case CONFIG.STATUSES.BUSY:
                return '‚è±Ô∏è';
            default:
                return 'üë§';
        }
    }
    
    getStatusText(status) {
        switch (status) {
            case CONFIG.STATUSES.AVAILABLE:
                return '–î–æ—Å—Ç—É–ø–µ–Ω';
            case CONFIG.STATUSES.HIKING:
                return '–í –ø–æ—Ö–æ–¥–µ';
            case CONFIG.STATUSES.TRAVELING:
                return '–ü—É—Ç–µ—à–µ—Å—Ç–≤—É—é';
            case CONFIG.STATUSES.BUSY:
                return '–ó–∞–Ω—è—Ç';
            default:
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }
    
    createPopupContent(user) {
        return `
            <div class="user-popup">
                <b>${user.name}</b><br>
                ${this.getStatusText(user.status)}<br>
                <button onclick="window.adventureSync.openPrivateChat('${user.id}', '${user.name}')">
                    üí¨ –ù–∞–ø–∏—Å–∞—Ç—å
                </button>
                <button onclick="window.adventureSync.createRouteToUser('${user.id}')">
                    üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç
                </button>
            </div>
        `;
    }
    
    applyActivityFilter(statuses) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        this.filteredStatuses = statuses;
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã
        const currentCenter = this.app.mapManager.map.getCenter();
        const currentZoom = this.app.mapManager.map.getZoom();
        
        if (statuses.includes('all')) {
            // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            this.userMarkers.forEach(marker => {
                this.markerClusterGroup.addLayer(marker);
            });
        } else {
            // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –º–∞—Ä–∫–µ—Ä—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–∞–º
            this.userMarkers.forEach(marker => {
                if (statuses.includes(marker.userStatus)) {
                    this.markerClusterGroup.addLayer(marker);
                } else {
                    this.markerClusterGroup.removeLayer(marker);
                }
            });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –º–∞—Å—à—Ç–∞–± –∫–∞—Ä—Ç—ã
        this.app.mapManager.map.setView(currentCenter, currentZoom);
    }
}
