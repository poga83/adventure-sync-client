let map, userMarker, socket;
const userMarkers = new Map();
const SERVER_URL = 'wss://adventure-sync-server.onrender.com';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
function initMap(coords = [55.751244, 37.618423]) {
    map = L.map('map-container').setView(coords, 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© OpenStreetMap'
    }).addTo(map);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞
function handleLogin() {
    const username = document.getElementById('username').value.trim();
    if (!username) return alert('–ü—Ä–∏–¥—É–º–∞–π –∫—Ä—É—Ç–æ–π –Ω–∏–∫!');
    
    socket = io(SERVER_URL);
    
    socket.on('connect', () => {
        document.getElementById('login-container').classList.add('hidden');
        document.getElementById('app-container').classList.remove('hidden');
        socket.emit('register', {
            name: username,
            status: document.getElementById('status-select').value
        });
    });

    // –°–ª—É—à–∞—Ç–µ–ª–∏ —Å–æ–±—ã—Ç–∏–π
    socket.on('users', updateUserMarkers);
    socket.on('chat', handleNewMessage);
    socket.on('connect_error', handleConnectionError);
    
    initMap();
    startLocationTracking();
}

// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
function startLocationTracking() {
    if (!navigator.geolocation) {
        alert('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è üò¢');
        return;
    }

    navigator.geolocation.watchPosition(
        position => {
            const coords = [position.coords.latitude, position.coords.longitude];
            socket.emit('position', coords);
        },
        error => {
            console.error('–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', error);
            alert('–†–∞–∑—Ä–µ—à–∏ –¥–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö! üîë');
        },
        { enableHighAccuracy: true, timeout: 10000 }
    );
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤
function updateUserMarkers(users) {
    users.forEach(user => {
        if (user.id === socket.id) {
            updateCurrentUserMarker(user);
        } else {
            updateOtherUserMarker(user);
        }
    });
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏...
