class AdventureSync {
    constructor() {
        console.log('üöÄ –ó–∞–ø—É—Å–∫ Adventure Sync...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        this.initializeManagers();
        this.initializeApplication();
    }
    
    initializeManagers() {
        console.log('üì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤...');
        
        // –ë–∞–∑–æ–≤—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã
        this.notificationManager = new NotificationManager();
        this.authManager = new AuthManager(this);
        this.uiManager = new UIManager(this);
        this.connectionManager = new ConnectionManager(this);
        
        // –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∫–∞—Ä—Ç—ã –∏ –¥–∞–Ω–Ω—ã—Ö (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
        this.mapManager = new MapManager(this);
        this.markerManager = new MarkerManager(this);
        this.chatManager = new ChatManager(this);
        this.routeManager = new RouteManager(this);
        
        console.log('‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    initializeApplication() {
        try {
            console.log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            this.authManager.initialize();
            
            // –î–µ–ª–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            window.adventureSync = this;
            
            // –ñ–¥–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.waitForAuthentication();
            
            console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
            this.notificationManager.showNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', 'error');
        }
    }
    
    waitForAuthentication() {
        const checkAuth = () => {
            if (this.authManager.isAuthenticated) {
                console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏...');
                this.initializeAfterAuth();
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 100–º—Å
                setTimeout(checkAuth, 100);
            }
        };
        
        checkAuth();
    }
    
    async initializeAfterAuth() {
        try {
            console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...');
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM –∏ CSS
            await this.waitForDOMReady();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É
            const map = this.mapManager.initialize();
            if (!map) {
                throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É');
            }
            
            console.log('üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∞—Ä–∫–µ—Ä–æ–≤...');
            this.markerManager.initialize(map);
            
            console.log('üõ£Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤...');
            this.routeManager.initialize(map);
            
            console.log('üí¨ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞...');
            this.chatManager.initialize();
            
            console.log('üéõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UI...');
            this.uiManager.initialize();
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
            console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...');
            await this.connectionManager.connect();
            
            console.log('‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            setTimeout(() => {
                this.notificationManager.showNotification('Adventure Sync –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!', 'success');
            }, 1000);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            this.notificationManager.showNotification(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`, 'error');
        }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM –∏ CSS
    waitForDOMReady() {
        return new Promise((resolve) => {
            if (document.readyState === 'complete') {
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ CSS
                setTimeout(resolve, 100);
            } else {
                window.addEventListener('load', () => {
                    setTimeout(resolve, 100);
                });
            }
        });
    }
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    openPrivateChat(userId, userName) {
        console.log('üí¨ –û—Ç–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:', userId, userName);
        if (this.uiManager) {
            this.uiManager.openPrivateChat(userId, userName);
        }
    }
    
    createRouteToUser(userId) {
        console.log('üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userId);
        if (this.mapManager) {
            this.mapManager.createRouteToUser(userId);
        }
    }
    
    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã
    diagnose() {
        const info = {
            version: '2.1.0',
            timestamp: new Date().toISOString(),
            authenticated: this.authManager?.isAuthenticated || false,
            currentUser: this.authManager?.getCurrentUser() || null,
            connectedUsers: this.markerManager?.users?.size || 0,
            mapInitialized: this.mapManager?.mapInitialized || false,
            serverConnected: this.connectionManager?.socket?.connected || false,
            modules: {
                notificationManager: !!this.notificationManager,
                authManager: !!this.authManager,
                uiManager: !!this.uiManager,
                connectionManager: !!this.connectionManager,
                mapManager: !!this.mapManager,
                markerManager: !!this.markerManager,
                chatManager: !!this.chatManager,
                routeManager: !!this.routeManager
            }
        };
        
        console.table(info);
        return info;
    }
    
    restart() {
        console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
        localStorage.clear();
        location.reload();
    }
    
    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    enableDebugMode() {
        CONFIG.MAP.DEBUG_MODE = true;
        localStorage.debug = 'socket.io:client*';
        console.log('üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω');
    }
    
    disableDebugMode() {
        CONFIG.MAP.DEBUG_MODE = false;
        localStorage.removeItem('debug');
        console.log('üêõ –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω');
    }
    
    testMapVisibility() {
        if (this.mapManager) {
            return this.mapManager.diagnoseMap();
        }
        return false;
    }
    
    async testServerConnection() {
        if (this.connectionManager) {
            return await this.connectionManager.testConnection();
        }
        return false;
    }
}

// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM
document.addEventListener('DOMContentLoaded', () => {
    console.log('üìÑ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Adventure Sync...');
    
    try {
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        new AdventureSync();
        
    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        document.body.innerHTML = `
            <div style="
                position: fixed; 
                top: 50%; 
                left: 50%; 
                transform: translate(-50%, -50%);
                background: #1a1a1a; 
                color: #e0e0e0; 
                padding: 40px;
                border-radius: 12px;
                text-align: center;
                font-family: Arial, sans-serif;
                border: 1px solid #f44336;
            ">
                <h2 style="color: #f44336; margin-bottom: 20px;">
                    <i class="fas fa-exclamation-triangle"></i>
                    –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Adventure Sync
                </h2>
                <p style="margin-bottom: 20px;">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.</p>
                <p style="font-size: 0.9rem; color: #b0b0b0; margin-bottom: 20px;">${error.message}</p>
                <button onclick="location.reload()" style="
                    background: #f44336; 
                    color: white; 
                    border: none; 
                    padding: 10px 20px; 
                    border-radius: 6px; 
                    cursor: pointer;
                    font-size: 1rem;
                ">
                    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
        `;
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
window.addEventListener('error', (e) => {
    console.error('üö® –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ JavaScript:', {
        message: e.message,
        filename: e.filename,
        lineno: e.lineno,
        colno: e.colno,
        error: e.error
    });
});

window.addEventListener('unhandledrejection', (e) => {
    console.error('üö® –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', e.reason);
    e.preventDefault();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
window.diagnoseAdventureSync = () => {
    if (window.adventureSync) {
        return window.adventureSync.diagnose();
    } else {
        console.error('‚ùå Adventure Sync –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return null;
    }
};

window.testMapVisibility = () => {
    if (window.adventureSync) {
        return window.adventureSync.testMapVisibility();
    }
    return false;
};

window.testServerConnection = async () => {
    if (window.adventureSync) {
        return await window.adventureSync.testServerConnection();
    }
    return false;
};
