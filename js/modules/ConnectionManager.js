/* js/modules/ConnectionManager.js */
import { CONFIG, pingServer } from '../config.js';

export class ConnectionManager {
  constructor() {
    this.socket = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = CONFIG.SOCKET.reconnectionAttempts;
    this.serverInfo = null;
  }

  async connect() {
    try {
      console.log('üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway —Å–µ—Ä–≤–µ—Ä—É...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Railway —Å–µ—Ä–≤–µ—Ä–∞
      const pingResult = await pingServer();
      if (!pingResult.success) {
        throw new Error('Railway —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      this.serverInfo = pingResult.data;
      
      // –°–æ–∑–¥–∞–µ–º Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      this.socket = io(CONFIG.SERVER_URL, {
        ...CONFIG.SOCKET,
        extraHeaders: {
          'User-Agent': 'Adventure-Sync-Client-Railway'
        }
      });
      
      this.setupSocketEvents();
      
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway:', error);
      window.ui?.showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`);
      return false;
    }
  }

  setupSocketEvents() {
    // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Railway —Å–µ—Ä–≤–µ—Ä—É, ID:', this.socket.id);
      console.log('üîó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:', this.socket.io.engine.transport.name);
      
      this.isConnected = true;
      this.reconnectAttempts = 0;
      this.updateConnectionStatus('connected');
      
      const platform = this.serverInfo?.platform || 'Railway';
      window.ui?.notify(`–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ ${platform}`, 'success');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userData = this.getUserData();
      if (userData) {
        this.socket.emit('userConnected', userData);
        this.socket.emit('getUsers');
      }
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Railway —Å–µ—Ä–≤–µ—Ä–∞
    this.socket.on('connectionConfirmed', (data) => {
      console.log('üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç Railway —Å–µ—Ä–≤–µ—Ä–∞:', data);
      if (data.server === 'railway') {
        console.log('üöÇ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Railway –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ');
      }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
    this.socket.on('groupMessage', (message) => {
      console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Railway:', message);
      this.displayMessage(message);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    this.socket.on('users', (users) => {
      console.log('üë• –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Railway:', users.length);
      this.updateUsersList(users);
    });

    this.socket.on('userConnected', (user) => {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —á–µ—Ä–µ–∑ Railway:', user.name);
      this.addUserToMap(user);
      window.ui?.notify(`${user.name} –æ–Ω–ª–∞–π–Ω`, 'info');
    });

    this.socket.on('userDisconnected', (userId) => {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è —á–µ—Ä–µ–∑ Railway:', userId);
      this.removeUserFromMap(userId);
    });

    this.socket.on('userPositionChanged', (data) => {
      this.updateUserPosition(data.userId, data.position);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–µ–∑–¥–æ–∫
    this.socket.on('userJoinedTrip', (data) => {
      console.log('üéØ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø–æ–µ–∑–¥–∫–µ:', data);
      window.ui?.notify(`${data.user.name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –ø–æ–µ–∑–¥–∫–µ`, 'info');
    });

    this.socket.on('trackSaved', (data) => {
      if (data.success) {
        window.ui?.notify('–¢—Ä–µ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', 'success');
      } else {
        window.ui?.notify('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç—Ä–µ–∫–∞', 'error');
      }
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('disconnect', (reason) => {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Railway —Å–µ—Ä–≤–µ—Ä–∞:', reason);
      this.isConnected = false;
      this.updateConnectionStatus('disconnected');
      
      let message = '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Railway —Å–µ—Ä–≤–µ—Ä–∞';
      if (reason === 'io server disconnect') {
        message = 'Railway —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
      } else if (reason === 'transport close') {
        message = '–ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Railway';
      }
      
      window.ui?.notify(message, 'error');
    });

    // –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway:', error);
      this.reconnectAttempts++;
      
      if (this.reconnectAttempts >= this.maxReconnectAttempts) {
        this.updateConnectionStatus('offline');
        window.ui?.notify('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Railway', 'error');
        return;
      }
      
      this.updateConnectionStatus('connecting');
      window.ui?.notify(
        `–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`,
        'warning'
      );
    });
  }

  updateConnectionStatus(status) {
    const statusElement = document.getElementById('connectionStatus');
    if (!statusElement) return;

    const iconElement = statusElement.querySelector('i');
    const textElement = statusElement.querySelector('span');
    
    statusElement.className = `connection-status ${status}`;
    
    switch (status) {
      case 'connected':
        iconElement.className = 'fas fa-train';
        textElement.textContent = 'Railway';
        statusElement.style.opacity = '0.7';
        break;
      case 'connecting':
        iconElement.className = 'fas fa-spinner fa-spin';
        textElement.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway...';
        statusElement.style.opacity = '1';
        break;
      case 'disconnected':
        iconElement.className = 'fas fa-exclamation-triangle';
        textElement.textContent = '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Railway...';
        statusElement.style.opacity = '1';
        break;
      case 'offline':
        iconElement.className = 'fas fa-times-circle';
        textElement.textContent = 'Railway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        statusElement.style.opacity = '1';
        break;
    }
  }

  getUserData() {
    if (window.auth?.current()) {
      return window.auth.current();
    }
    
    const userData = localStorage.getItem('adv_user');
    if (userData) {
      try {
        return JSON.parse(userData);
      } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
      }
    }
    return null;
  }

  sendMessage(message, tripId = null) {
    if (this.socket && this.isConnected) {
      this.socket.emit('groupMessage', {
        content: message,
        tripId: tripId
      });
      return true;
    } else {
      window.ui?.notify('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Railway —Å–µ—Ä–≤–µ—Ä–æ–º', 'warning');
      return false;
    }
  }

  joinTrip(tripId) {
    if (this.socket && this.isConnected) {
      this.socket.emit('joinTrip', tripId);
      return true;
    }
    return false;
  }

  saveTrack(trackData) {
    if (this.socket && this.isConnected) {
      this.socket.emit('saveTrack', trackData);
      return true;
    }
    return false;
  }

  updatePosition(position) {
    if (this.socket && this.isConnected) {
      this.socket.emit('updatePosition', position);
    }
  }

  displayMessage(message) {
    const messagesContainer = document.getElementById('messagesContainer');
    if (!messagesContainer) return;

    const messageElement = document.createElement('div');
    messageElement.className = 'message';
    messageElement.innerHTML = `
      <div class="message-header">
        <span class="sender">${message.senderName}</span>
        <span class="timestamp">${new Date(message.timestamp).toLocaleTimeString()}</span>
      </div>
      <div class="message-content">${message.content}</div>
    `;
    
    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  updateUsersList(users) {
    const usersList = document.getElementById('usersList');
    if (!usersList) return;

    usersList.innerHTML = '';
    users.forEach(user => {
      const userElement = document.createElement('div');
      userElement.className = 'user-item';
      userElement.innerHTML = `
        <span class="user-name">${user.name}</span>
        <span class="user-status">${user.status}</span>
      `;
      usersList.appendChild(userElement);
    });
  }

  addUserToMap(user) {
    if (user.position && window.map) {
      // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç—É
      // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –∫–∞—Ä—Ç—ã
    }
  }

  removeUserFromMap(userId) {
    // –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Ä—Ç—ã
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –∫–∞—Ä—Ç—ã
  }

  updateUserPosition(userId, position) {
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞—Ä—Ç–µ
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –∫–∞—Ä—Ç—ã
  }

  disconnect() {
    if (this.socket) {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Railway —Å–µ—Ä–≤–µ—Ä–∞');
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }
}

window.ConnectionManager = ConnectionManager;
