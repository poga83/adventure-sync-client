class ConnectionManager {
    constructor(app) {
        this.app = app;
        this.socket = null;
        this.isOffline = !navigator.onLine;
        this.offlineQueue = [];
        this.connectionAttempts = 0;
        this.maxConnectionAttempts = CONFIG.SOCKET.RECONNECTION_ATTEMPTS;
        this.reconnectDelay = CONFIG.SOCKET.RECONNECTION_DELAY;
        this.setupConnectionListeners();
    }

    async connect() {
        if (this.socket && this.socket.connected) {
            console.log('‚úÖ –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É');
            this.updateConnectionStatus('connected');
            return true;
        }

        console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render —Å–µ—Ä–≤–µ—Ä—É...');
        
        const serverAvailable = await CONFIG.testServerConnection();
        if (!serverAvailable) {
            console.error('‚ùå –°–µ—Ä–≤–µ—Ä Render –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            this.handleConnectionError(new Error('–°–µ—Ä–≤–µ—Ä Adventure Sync –Ω–∞ Render –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
            return false;
        }

        console.log(`üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: ${CONFIG.SERVER_URL}`);
        this.updateConnectionStatus('connecting');

        try {
            this.socket = io(CONFIG.SERVER_URL, {
                transports: ['websocket', 'polling'],
                timeout: CONFIG.SOCKET.TIMEOUT,
                reconnection: true,
                reconnectionAttempts: this.maxConnectionAttempts,
                reconnectionDelay: this.reconnectDelay,
                reconnectionDelayMax: 10000,
                randomizationFactor: 0.5,
                forceNew: CONFIG.SOCKET.FORCE_NEW,
                autoConnect: true,
                secure: CONFIG.SOCKET.SECURE,
                upgrade: CONFIG.SOCKET.UPGRADE,
                rememberUpgrade: true,
                pingTimeout: CONFIG.SOCKET.PING_TIMEOUT,
                pingInterval: CONFIG.SOCKET.PING_INTERVAL,
                withCredentials: true,
                extraHeaders: {
                    'Access-Control-Allow-Origin': window.location.origin,
                    'Access-Control-Allow-Credentials': 'true'
                }
            });
            
            this.setupSocketEvents();
            return true;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
            this.handleConnectionError(error);
            return false;
        }
    }

    setupSocketEvents() {
        this.socket.on('connectionConfirmed', (data) => {
            console.log('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Render —Å–µ—Ä–≤–µ—Ä–∞:', data);
        });

        this.socket.on('connect', () => {
            console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Render —Å–µ—Ä–≤–µ—Ä—É, ID:', this.socket.id);
            console.log('üîó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:', this.socket.io.engine.transport.name);
            
            this.connectionAttempts = 0;
            this.updateConnectionStatus('connected');
            this.app.notificationManager.showNotification('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —Å–µ—Ä–≤–µ—Ä—É Adventure Sync', 'success');
            
            const userData = this.getUserData();
            if (userData) {
                console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
                this.socket.emit('userConnected', userData);
                this.socket.emit('getUsers');
                this.socket.emit('getGroupChatHistory');
            }
            
            this.syncOfflineChanges();
        });
        
        this.socket.io.on('upgrade', () => {
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞:', this.socket.io.engine.transport.name);
        });
        
        this.socket.on('disconnect', (reason) => {
            console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Render —Å–µ—Ä–≤–µ—Ä–∞:', reason);
            this.updateConnectionStatus('disconnected');
            
            let message = '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞';
            if (reason === 'io server disconnect') {
                message = '–°–µ—Ä–≤–µ—Ä —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
            } else if (reason === 'transport close') {
                message = '–ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º';
            } else if (reason === 'ping timeout') {
                message = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞';
            }
            
            this.app.notificationManager.showNotification(message, 'error');
        });

        this.socket.on('connect_error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render:', error);
            this.connectionAttempts++;
            
            let errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É Adventure Sync';
            
            if (error.message) {
                if (error.message.includes('timeout')) {
                    errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render';
                } else if (error.message.includes('CORS')) {
                    errorMessage = '–û—à–∏–±–∫–∞ CORS –ø–æ–ª–∏—Ç–∏–∫–∏';
                } else if (error.message.includes('404')) {
                    errorMessage = '–°–µ—Ä–≤–µ—Ä –Ω–∞ Render –Ω–µ –Ω–∞–π–¥–µ–Ω';
                } else if (error.message.includes('503')) {
                    errorMessage = '–°–µ—Ä–≤–µ—Ä Render –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                }
            }
            
            if (this.connectionAttempts >= this.maxConnectionAttempts) {
                console.error(`‚ùå –ò—Å—á–µ—Ä–ø–∞–Ω—ã –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render (${this.maxConnectionAttempts})`);
                this.handleConnectionError(error);
            } else {
                this.updateConnectionStatus('connecting');
                const attemptMessage = `${errorMessage} (${this.connectionAttempts}/${this.maxConnectionAttempts})`;
                this.app.notificationManager.showNotification(attemptMessage, 'warning');
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        this.socket.on('users', (users) => {
            console.log('üì• –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–µ—Ä–∞:', users.length);
            this.app.markerManager.updateUsers(users);
        });
        
        this.socket.on('userConnected', (user) => {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è:', user.name);
            this.app.markerManager.addOrUpdateUser(user);
            this.app.notificationManager.showNotification(`${user.name} –æ–Ω–ª–∞–π–Ω`);
        });
        
        this.socket.on('userDisconnected', (userId) => {
            console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è:', userId);
            const user = this.app.markerManager.getUser(userId);
            if (user) {
                this.app.notificationManager.showNotification(`${user.name} –æ—Ñ—Ñ–ª–∞–π–Ω`);
                this.app.markerManager.removeUser(userId);
            }
        });
        
        this.socket.on('userStatusChanged', (data) => {
            console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data);
            if (data.userId && data.status) {
                this.app.markerManager.updateUserStatus(data.userId, data.status);
            }
        });
        
        this.socket.on('userPositionChanged', (data) => {
            if (data.userId && data.position) {
                this.app.markerManager.updateUserPosition(data.userId, data.position);
            }
        });
        
        this.socket.on('groupMessage', (message) => {
            console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—â–µ–º —á–∞—Ç–µ:', message);
            this.app.chatManager.addGroupMessage(message);
        });
        
        this.socket.on('privateMessage', (message) => {
            console.log('üí¨ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–∞—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', message);
            this.app.chatManager.addPrivateMessage(message);
        });
        
        this.socket.on('groupChatHistory', (messages) => {
            console.log('üìã –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —á–∞—Ç–∞:', messages.length);
            this.app.chatManager.setGroupChatHistory(messages);
        });
        
        this.socket.on('privateChatHistory', (data) => {
            console.log('üìã –ü–æ–ª—É—á–µ–Ω–∞ –∏—Å—Ç–æ—Ä–∏—è –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞:', data);
            this.app.chatManager.setPrivateChatHistory(data.userId, data.messages);
        });

        this.socket.on('error', (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ Socket.IO:', error);
            this.app.notificationManager.showNotification(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`, 'error');
        });
    }

    handleConnectionError(error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Render:', error);
        this.updateConnectionStatus('offline');
        
        let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É Adventure Sync –Ω–∞ Render.';
        let suggestions = [];
        
        if (error.message && error.message.includes('timeout')) {
            suggestions.push('–°–µ—Ä–≤–µ—Ä –º–æ–∂–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ "—Å–Ω–∞" - –ø–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã');
        } else if (error.message && error.message.includes('503')) {
            suggestions.push('–°–µ—Ä–≤–µ—Ä Render –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        } else {
            suggestions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É');
            suggestions.push('–í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è');
        }
        
        const fullMessage = suggestions.length > 0 
            ? `${errorMessage}\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n‚Ä¢ ${suggestions.join('\n‚Ä¢ ')}`
            : errorMessage;
            
        this.app.notificationManager.showNotification(fullMessage, 'error');
        this.handleDisconnection();
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞ –±–µ–∑ —Å–∫—Ä—ã—Ç–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
    updateConnectionStatus(status) {
        const statusElement = document.getElementById('connectionStatus');
        if (statusElement) {
            const iconElement = statusElement.querySelector('i');
            const textElement = statusElement.querySelector('span');
            
            statusElement.className = `connection-status ${status}`;
            
            switch (status) {
                case 'connected':
                    iconElement.className = 'fas fa-wifi';
                    textElement.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Render';
                    statusElement.style.opacity = '0.8';
                    setTimeout(() => {
                        if (statusElement.classList.contains('connected')) {
                            statusElement.style.opacity = '0.4';
                        }
                    }, 5000);
                    break;
                case 'disconnected':
                    iconElement.className = 'fas fa-exclamation-triangle';
                    textElement.textContent = '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Render...';
                    statusElement.style.opacity = '1';
                    break;
                case 'connecting':
                    iconElement.className = 'fas fa-spinner fa-spin';
                    textElement.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Render...';
                    statusElement.style.opacity = '1';
                    break;
                case 'offline':
                    iconElement.className = 'fas fa-times-circle';
                    textElement.textContent = '–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
                    statusElement.style.opacity = '1';
                    break;
            }
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ù–µ —Å–∫—Ä—ã–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –≤ –æ—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ
        const userNickname = document.getElementById('userNickname');
        if (userNickname) {
            if (status === 'offline') {
                userNickname.style.opacity = '0.6';
                userNickname.title = '–û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –∏–∑–º–µ–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏';
            } else {
                userNickname.style.opacity = '1';
                userNickname.title = '';
            }
        }
    }
    
    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    disconnect() {
        if (this.socket) {
            this.socket.disconnect();
            this.socket = null;
            console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Render —Å–µ—Ä–≤–µ—Ä–æ–º –∑–∞–∫—Ä—ã—Ç–æ');
        }
    }
    
    getUserData() {
        if (this.app.authManager && this.app.authManager.currentUser) {
            return this.app.authManager.currentUser;
        }
        
        const userData = localStorage.getItem(CONFIG.CACHE.USER_KEY);
        if (userData) {
            try {
                return JSON.parse(userData);
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
            }
        }
        return null;
    }
    
    updateUserStatus(status) {
        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞:', status);
        if (this.socket && this.socket.connected) {
            this.socket.emit('updateStatus', status);
        } else {
            this.offlineQueue.push({ type: 'updateStatus', data: status });
            this.app.notificationManager.showNotification('–°—Ç–∞—Ç—É—Å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏', 'info');
        }
    }
    
    updateUserPosition(position) {
        if (this.socket && this.socket.connected) {
            this.socket.emit('updatePosition', position);
        } else {
            this.offlineQueue.push({ type: 'updatePosition', data: position });
        }
    }
    
    sendGroupMessage(message) {
        if (this.socket && this.socket.connected) {
            this.socket.emit('groupMessage', message);
            return true;
        } else {
            this.offlineQueue.push({ type: 'groupMessage', data: message });
            return false;
        }
    }
    
    sendPrivateMessage(userId, message) {
        if (this.socket && this.socket.connected) {
            this.socket.emit('privateMessage', { to: userId, content: message });
            return true;
        } else {
            this.offlineQueue.push({ type: 'privateMessage', data: { to: userId, content: message } });
            return false;
        }
    }
    
    requestPrivateChatHistory(userId) {
        if (this.socket && this.socket.connected) {
            this.socket.emit('getPrivateChatHistory', userId);
        }
    }
    
    setupConnectionListeners() {
        window.addEventListener('online', () => {
            this.isOffline = false;
            this.handleReconnection();
        });
        
        window.addEventListener('offline', () => {
            this.isOffline = true;
            this.handleDisconnection();
        });
    }
    
    handleDisconnection() {
        this.isOffline = true;
        this.updateConnectionStatus('offline');
        
        document.querySelectorAll('.requires-online').forEach(el => {
            el.classList.add('disabled');
        });
    }
    
    handleReconnection() {
        if (this.isOffline) {
            this.isOffline = false;
            this.app.notificationManager.showNotification('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
            
            document.querySelectorAll('.requires-online').forEach(el => {
                el.classList.remove('disabled');
            });
            
            if (!this.socket || !this.socket.connected) {
                this.connect();
            }
        }
    }
    
    syncOfflineChanges() {
        if (this.offlineQueue.length > 0 && this.socket && this.socket.connected) {
            console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${this.offlineQueue.length} –æ—Ñ—Ñ–ª–∞–π–Ω –∏–∑–º–µ–Ω–µ–Ω–∏–π...`);
            this.app.notificationManager.showNotification('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...');
            
            this.offlineQueue.forEach(item => {
                switch (item.type) {
                    case 'updateStatus':
                        this.socket.emit('updateStatus', item.data);
                        break;
                    case 'updatePosition':
                        this.socket.emit('updatePosition', item.data);
                        break;
                    case 'groupMessage':
                        this.socket.emit('groupMessage', item.data);
                        break;
                    case 'privateMessage':
                        this.socket.emit('privateMessage', item.data);
                        break;
                }
            });
            
            this.offlineQueue = [];
            this.app.notificationManager.showNotification('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'success');
        }
    }
}
