/* js/modules/ConnectionManager.js */
import { CONFIG, pingServer, checkFlyRegion } from '../config.js';

export class ConnectionManager {
  constructor() {
    this.socket = null;
    this.isConnected = false;
    this.reconnectAttempts = 0;
    this.maxReconnectAttempts = CONFIG.SOCKET.reconnectionAttempts;
    this.serverInfo = null;
  }

  async connect() {
    try {
      console.log('üöÄ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Fly.io —Å–µ—Ä–≤–µ—Ä—É...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Fly.io —Å–µ—Ä–≤–µ—Ä–∞
      if (!await pingServer()) {
        throw new Error('Fly.io —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
      this.serverInfo = await checkFlyRegion();
      
      // –°–æ–∑–¥–∞–µ–º Socket.IO —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
      this.socket = io(CONFIG.SERVER_URL, {
        ...CONFIG.SOCKET,
        extraHeaders: {
          'User-Agent': 'Adventure-Sync-Client-Fly'
        }
      });
      
      this.setupSocketEvents();
      
      return true;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Fly.io:', error);
      window.ui?.showError(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: ${error.message}`);
      return false;
    }
  }

  setupSocketEvents() {
    // –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('connect', () => {
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ Fly.io —Å–µ—Ä–≤–µ—Ä—É, ID:', this.socket.id);
      console.log('üîó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç:', this.socket.io.engine.transport.name);
      
      this.isConnected = true;
      this.reconnectAttempts = 0;
      this.updateConnectionStatus('connected');
      
      const region = this.serverInfo?.environment || 'production';
      window.ui?.notify(`–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Fly.io (${region})`, 'success');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userData = this.getUserData();
      if (userData) {
        this.socket.emit('userConnected', userData);
        this.socket.emit('getUsers');
        this.socket.emit('getGroupChatHistory');
      }
    });

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç Fly.io —Å–µ—Ä–≤–µ—Ä–∞
    this.socket.on('connectionConfirmed', (data) => {
      console.log('üéØ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç Fly.io —Å–µ—Ä–≤–µ—Ä–∞:', data);
      if (data.server === 'fly.io') {
        console.log('üõ©Ô∏è –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Fly.io –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ');
      }
    });

    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
    this.socket.on('disconnect', (reason) => {
      console.log('‚ùå –û—Ç–∫–ª—é—á–µ–Ω –æ—Ç Fly.io —Å–µ—Ä–≤–µ—Ä–∞:', reason);
      this.isConnected = false;
      this.updateConnectionStatus('disconnected');
      
      let message = '–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Fly.io —Å–µ—Ä–≤–µ—Ä–∞';
      if (reason === 'io server disconnect') {
        message = 'Fly.io —Å–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–æ—Ä–≤–∞–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
      } else if (reason === 'transport close') {
        message = '–ü–æ—Ç–µ—Ä—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Fly.io';
      }
      
      window.ui?.notify(message, 'error');
    });

    // –û—à–∏–±–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.socket.on('connect_error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Fly.io:', error);
      this.reconnectAttempts++;
      
      if (this.reconnectAttempts >= this.maxReconnectAttempts) {
        this.updateConnectionStatus('offline');
        window.ui?.notify('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Fly.io', 'error');
        return;
      }
      
      this.updateConnectionStatus('connecting');
      const waitTime = Math.min(1000 * Math.pow(2, this.reconnectAttempts), 30000);
      window.ui?.notify(
        `–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Fly.io... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`,
        'warning'
      );
    });

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
    this.socket.on('serverShutdown', (data) => {
      console.log('üîÑ Fly.io —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è:', data.message);
      window.ui?.notify(data.message, 'info');
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    this.socket.on('users', (users) => {
      console.log('üë• –ü–æ–ª—É—á–µ–Ω —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Fly.io:', users.length);
      if (window.markerManager) {
        window.markerManager.updateUsers(users);
      }
    });

    this.socket.on('groupMessage', (message) => {
      console.log('üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Fly.io:', message);
      if (window.chatManager) {
        window.chatManager.addGroupMessage(message);
      }
    });

    this.socket.on('userConnected', (user) => {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è —á–µ—Ä–µ–∑ Fly.io:', user.name);
      if (window.markerManager) {
        window.markerManager.addOrUpdateUser(user);
      }
      window.ui?.notify(`${user.name} –æ–Ω–ª–∞–π–Ω`, 'info');
    });

    this.socket.on('userDisconnected', (userId) => {
      console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è —á–µ—Ä–µ–∑ Fly.io:', userId);
      if (window.markerManager) {
        window.markerManager.removeUser(userId);
      }
    });
  }

  updateConnectionStatus(status) {
    const statusElement = document.getElementById('connectionStatus');
    if (!statusElement) return;

    const iconElement = statusElement.querySelector('i');
    const textElement = statusElement.querySelector('span');
    
    statusElement.className = `connection-status ${status}`;
    
    switch (status) {
      case 'connected':
        iconElement.className = 'fas fa-cloud';
        textElement.textContent = 'Fly.io';
        statusElement.style.opacity = '0.7';
        break;
      case 'connecting':
        iconElement.className = 'fas fa-spinner fa-spin';
        textElement.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Fly.io...';
        statusElement.style.opacity = '1';
        break;
      case 'disconnected':
        iconElement.className = 'fas fa-exclamation-triangle';
        textElement.textContent = '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Fly.io...';
        statusElement.style.opacity = '1';
        break;
      case 'offline':
        iconElement.className = 'fas fa-times-circle';
        textElement.textContent = 'Fly.io –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        statusElement.style.opacity = '1';
        break;
    }
  }

  getUserData() {
    if (window.auth?.current()) {
      return window.auth.current();
    }
    
    const userData = localStorage.getItem('adv_user');
    if (userData) {
      try {
        return JSON.parse(userData);
      } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', e);
      }
    }
    return null;
  }

  sendMessage(message) {
    if (this.socket && this.isConnected) {
      this.socket.emit('groupMessage', message);
      return true;
    } else {
      window.ui?.notify('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Fly.io —Å–µ—Ä–≤–µ—Ä–æ–º', 'warning');
      return false;
    }
  }

  disconnect() {
    if (this.socket) {
      console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Fly.io —Å–µ—Ä–≤–µ—Ä–∞');
      this.socket.disconnect();
      this.socket = null;
      this.isConnected = false;
    }
  }
}

window.ConnectionManager = ConnectionManager;
