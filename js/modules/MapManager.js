class MapManager {
    constructor(app) {
        this.app = app;
        this.map = null;
        this.userLocationMarker = null;
        this.watchId = null;
        this.markerPlacementMode = false;
        this.tempMarkers = [];
        this.mapInitialized = false;
    }
    
    initialize() {
        console.log('üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã...');
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const mapContainer = document.getElementById('map');
        if (!mapContainer) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return null;
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        const containerRect = mapContainer.getBoundingClientRect();
        console.log('üìê –†–∞–∑–º–µ—Ä—ã –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫–∞—Ä—Ç—ã:', containerRect);
        
        if (containerRect.height === 0) {
            console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞—Ä—Ç—ã –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤—É—é –≤—ã—Å–æ—Ç—É!');
            this.app.notificationManager.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã: –Ω—É–ª–µ–≤–∞—è –≤—ã—Å–æ—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞', 'error');
            return null;
        }

        try {
            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            this.map = L.map('map', {
                zoomControl: false,
                attributionControl: true,
                preferCanvas: true // –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            }).setView(CONFIG.MAP.DEFAULT_CENTER, CONFIG.MAP.DEFAULT_ZOOM);

            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ OSM —Ç–∞–π–ª—ã
            const tileLayer = L.tileLayer(CONFIG.MAP.TILE_LAYER, {
                attribution: CONFIG.MAP.ATTRIBUTION,
                maxZoom: 19,
                subdomains: ['a', 'b', 'c']
            });

            tileLayer.addTo(this.map);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ç–∞–π–ª–æ–≤
            tileLayer.on('loading', () => {
                console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–ª–æ–≤ –∫–∞—Ä—Ç—ã...');
            });

            tileLayer.on('load', () => {
                console.log('‚úÖ –¢–∞–π–ª—ã –∫–∞—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
            });

            tileLayer.on('tileerror', (e) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–ª–∞:', e);
            });

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—ã
            this.addCustomControls();
            
            // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
            this.requestUserLocation();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupMapEvents();
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
            setTimeout(() => {
                if (this.map) {
                    this.map.invalidateSize();
                    console.log('üîÑ –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
                }
            }, 100);
            
            this.mapInitialized = true;
            console.log('‚úÖ –ö–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            
            return this.map;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã:', error);
            this.app.notificationManager.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã', 'error');
            return null;
        }
    }
    
    addCustomControls() {
        // Zoom –∫–æ–Ω—Ç—Ä–æ–ª—å
        const zoomControl = L.control.zoom({
            position: 'topright'
        });
        zoomControl.addTo(this.map);
        
        // GPS –∫–æ–Ω—Ç—Ä–æ–ª—å
        const gpsControl = L.control({position: 'topright'});
        gpsControl.onAdd = (map) => {
            const container = L.DomUtil.create('div', 'custom-control');
            container.innerHTML = `
                <button id="gpsBtn" title="–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" class="control-btn">
                    <i class="fas fa-crosshairs"></i>
                </button>
            `;
            
            L.DomEvent.disableClickPropagation(container);
            
            container.querySelector('#gpsBtn').onclick = () => {
                this.centerOnUserLocation();
            };
            
            return container;
        };
        gpsControl.addTo(this.map);
        
        // –ö–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        const markerControl = L.control({position: 'topright'});
        markerControl.onAdd = (map) => {
            const container = L.DomUtil.create('div', 'custom-control');
            container.innerHTML = `
                <button id="markerToggleBtn" title="–†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤" class="control-btn">
                    <i class="fas fa-map-pin"></i>
                </button>
                <button id="clearMarkersBtn" title="–û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ä–∫–µ—Ä—ã" class="control-btn">
                    <i class="fas fa-trash"></i>
                </button>
            `;
            
            L.DomEvent.disableClickPropagation(container);
            
            const toggleBtn = container.querySelector('#markerToggleBtn');
            const clearBtn = container.querySelector('#clearMarkersBtn');
            
            toggleBtn.onclick = () => {
                this.toggleMarkerPlacementMode();
                toggleBtn.classList.toggle('active', this.markerPlacementMode);
            };
            
            clearBtn.onclick = () => {
                this.clearTempMarkers();
            };
            
            return container;
        };
        markerControl.addTo(this.map);
    }
    
    setupMapEvents() {
        // –ö–ª–∏–∫ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤
        this.map.on('click', (e) => {
            if (this.markerPlacementMode) {
                this.addTempMarker(e.latlng);
            }
        });
        
        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        this.map.on('locationfound', (e) => {
            this.onLocationFound(e);
        });
        
        this.map.on('locationerror', (e) => {
            this.onLocationError(e);
        });

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        this.map.on('resize', () => {
            console.log('üîÑ –ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞ —Ä–∞–∑–º–µ—Ä');
        });
    }
    
    requestUserLocation() {
        if ('geolocation' in navigator) {
            console.log('üìç –ó–∞–ø—Ä–æ—Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏...');
            this.map.locate({
                setView: true,
                maxZoom: 16,
                enableHighAccuracy: true,
                timeout: 10000
            });
        } else {
            console.warn('‚ö†Ô∏è –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
            this.app.notificationManager.showNotification('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è', 'error');
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            this.onLocationError({message: '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è'});
        }
    }
    
    onLocationFound(e) {
        const userPosition = [e.latlng.lat, e.latlng.lng];
        console.log('‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ:', userPosition);
        
        this.updateUserLocation(userPosition);
        this.startWatchingUserLocation();
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!this.userLocationMarker) {
            this.userLocationMarker = L.marker(e.latlng, {
                icon: L.divIcon({
                    className: 'user-marker current-user',
                    html: '<i class="fas fa-user" style="color: white; font-size: 16px;"></i>',
                    iconSize: [30, 30],
                    iconAnchor: [15, 15]
                }),
                zIndexOffset: 1000
            }).addTo(this.map);
            
            this.userLocationMarker.bindPopup(`
                <div class="user-popup">
                    <h4>–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h4>
                    <div class="status">–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è</div>
                </div>
            `);
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä—É–≥ —Ç–æ—á–Ω–æ—Å—Ç–∏
            L.circle(e.latlng, {
                radius: e.accuracy,
                fillColor: '#9C27B0',
                fillOpacity: 0.1,
                color: '#9C27B0',
                weight: 1
            }).addTo(this.map);
        }
        
        this.app.notificationManager.showNotification('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ');
    }
    
    onLocationError(e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏:', e.message);
        this.app.notificationManager.showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–∑–∏—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.', 'warning');
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ú–æ—Å–∫–≤–∞)
        const defaultPosition = CONFIG.MAP.DEFAULT_CENTER;
        this.updateUserLocation(defaultPosition);
        
        // –°–æ–∑–¥–∞–µ–º –º–∞—Ä–∫–µ—Ä –≤ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if (!this.userLocationMarker) {
            this.userLocationMarker = L.marker(defaultPosition, {
                icon: L.divIcon({
                    className: 'user-marker current-user',
                    html: '<i class="fas fa-user" style="color: white; font-size: 16px;"></i>',
                    iconSize: [30, 30],
                    iconAnchor: [15, 15]
                }),
                zIndexOffset: 1000
            }).addTo(this.map);
            
            this.userLocationMarker.bindPopup(`
                <div class="user-popup">
                    <h4>–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h4>
                    <div class="status">–ü–æ–∑–∏—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é</div>
                </div>
            `);
        }
    }
    
    startWatchingUserLocation() {
        if ('geolocation' in navigator) {
            this.watchId = navigator.geolocation.watchPosition(
                (position) => {
                    const userPosition = [position.coords.latitude, position.coords.longitude];
                    this.updateUserLocation(userPosition);
                },
                (error) => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', error);
                },
                {
                    enableHighAccuracy: true,
                    timeout: 5000,
                    maximumAge: 30000
                }
            );
        }
    }
    
    updateUserLocation(position) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        if (this.app.connectionManager) {
            this.app.connectionManager.updateUserPosition(position);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
        if (this.userLocationMarker) {
            this.userLocationMarker.setLatLng(position);
        }
    }
    
    centerOnUserLocation() {
        if (this.userLocationMarker) {
            this.map.setView(this.userLocationMarker.getLatLng(), 16);
            this.app.notificationManager.showNotification('–ö–∞—Ä—Ç–∞ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∞—à–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏');
        } else {
            this.requestUserLocation();
        }
    }
    
    toggleMarkerPlacementMode() {
        this.markerPlacementMode = !this.markerPlacementMode;
        
        if (this.markerPlacementMode) {
            this.app.notificationManager.showNotification('–†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –≤–∫–ª—é—á–µ–Ω');
            this.map.getContainer().style.cursor = 'crosshair';
        } else {
            this.app.notificationManager.showNotification('–†–µ–∂–∏–º —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –≤—ã–∫–ª—é—á–µ–Ω');
            this.map.getContainer().style.cursor = '';
        }
    }
    
    addTempMarker(latlng) {
        const marker = L.marker(latlng, {
            icon: L.divIcon({
                className: 'temp-marker',
                html: '<i class="fas fa-map-pin" style="color: #ff6b6b; font-size: 16px;"></i>',
                iconSize: [25, 25],
                iconAnchor: [12, 25]
            })
        }).addTo(this.map);
        
        const markerId = L.Util.stamp(marker);
        
        marker.bindPopup(`
            <div class="user-popup">
                <h4>–í—Ä–µ–º–µ–Ω–Ω—ã–π –º–∞—Ä–∫–µ—Ä</h4>
                <div class="status">Lat: ${latlng.lat.toFixed(6)}<br>Lng: ${latlng.lng.toFixed(6)}</div>
                <button onclick="window.adventureSync.mapManager.removeMarker('${markerId}')" 
                        style="margin-top: 5px; padding: 5px 10px; background: #ff6b6b; color: white; border: none; border-radius: 3px; cursor: pointer;">
                    –£–¥–∞–ª–∏—Ç—å
                </button>
                <button onclick="window.adventureSync.mapManager.createRouteToMarker('${markerId}')" 
                        style="margin-top: 5px; padding: 5px 10px; background: #4CAF50; color: white; border: none; border-radius: 3px; cursor: pointer;">
                    –ú–∞—Ä—à—Ä—É—Ç
                </button>
            </div>
        `);
        
        this.tempMarkers.push(marker);
        this.app.notificationManager.showNotification('–ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω');
    }
    
    removeMarker(markerId) {
        const markerIndex = this.tempMarkers.findIndex(marker => L.Util.stamp(marker) == markerId);
        if (markerIndex !== -1) {
            this.map.removeLayer(this.tempMarkers[markerIndex]);
            this.tempMarkers.splice(markerIndex, 1);
            this.app.notificationManager.showNotification('–ú–∞—Ä–∫–µ—Ä —É–¥–∞–ª–µ–Ω');
        }
    }
    
    clearTempMarkers() {
        this.tempMarkers.forEach(marker => {
            this.map.removeLayer(marker);
        });
        this.tempMarkers = [];
        this.app.notificationManager.showNotification('–í—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã —É–¥–∞–ª–µ–Ω—ã');
    }
    
    createRouteToMarker(markerId) {
        const marker = this.tempMarkers.find(m => L.Util.stamp(m) == markerId);
        if (marker && this.userLocationMarker) {
            const from = this.userLocationMarker.getLatLng();
            const to = marker.getLatLng();
            this.app.routeManager.createRoute(from, to);
        }
    }
    
    createRouteToUser(userId) {
        const user = this.app.markerManager.getUser(userId);
        if (!user) {
            this.app.notificationManager.showNotification('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }
        
        if (!this.userLocationMarker) {
            this.app.notificationManager.showNotification('–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ', 'error');
            return;
        }
        
        const from = this.userLocationMarker.getLatLng();
        const to = L.latLng(user.position[0], user.position[1]);
        
        this.app.routeManager.createRoute(from, to);
        this.app.notificationManager.showNotification(`–°—Ç—Ä–æ–∏–º –º–∞—Ä—à—Ä—É—Ç –∫ ${user.name}`);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
    invalidateSize() {
        if (this.map) {
            console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∫–∞—Ä—Ç—ã');
            setTimeout(() => {
                this.map.invalidateSize(true); // true = –∞–Ω–∏–º–∞—Ü–∏—è
                console.log('‚úÖ –†–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω');
            }, 100);
        }
    }
}
