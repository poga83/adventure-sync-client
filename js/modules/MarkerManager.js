class MarkerManager {
    constructor(app) {
        this.app = app;
        this.userMarkers = new Map();
        this.users = new Map();
        this.markerClusterGroup = null;
        this.filteredStatuses = ['all'];
        this.currentUserId = null;
    }
    
    initialize(map) {
        // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
        this.markerClusterGroup = L.markerClusterGroup({
            chunkedLoading: true,
            spiderfyOnMaxZoom: true,
            disableClusteringAtZoom: 15,
            maxClusterRadius: window.innerWidth <= 768 ? 60 : 50,
            zoomToBoundsOnClick: true,
            showCoverageOnHover: false,
            iconCreateFunction: (cluster) => {
                const count = cluster.getChildCount();
                let size = 'small';
                if (count > 10) size = 'medium';
                if (count > 100) size = 'large';
                
                return L.divIcon({
                    html: `<div><span>${count}</span></div>`,
                    className: `marker-cluster marker-cluster-${size}`,
                    iconSize: L.point(40, 40)
                });
            }
        });
        
        map.addLayer(this.markerClusterGroup);
        
        // –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.currentUserId = this.app.connectionManager.getUserData().id;
        
        this.restoreFromCache();
        return this.markerClusterGroup;
    }
    
    restoreFromCache() {
        const cachedPositions = localStorage.getItem(CONFIG.CACHE.POSITIONS_KEY);
        if (cachedPositions) {
            try {
                const positions = JSON.parse(cachedPositions);
                console.log('–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –∫—ç—à–∞:', positions.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                positions.forEach(user => {
                    if (user.id !== this.currentUserId) { // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
                        this.addOrUpdateUser(user);
                    }
                });
            } catch (e) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', e);
            }
        }
    }
    
    updateUsers(users) {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const filteredUsers = users.filter(user => user.id !== this.currentUserId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        localStorage.setItem(CONFIG.CACHE.POSITIONS_KEY, JSON.stringify(filteredUsers));
        
        // –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        this.userMarkers.forEach((marker, userId) => {
            if (userId !== this.currentUserId) {
                this.markerClusterGroup.removeLayer(marker);
                this.userMarkers.delete(userId);
            }
        });
        
        // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ)
        const currentUser = this.users.get(this.currentUserId);
        this.users.clear();
        if (currentUser) {
            this.users.set(this.currentUserId, currentUser);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        filteredUsers.forEach(user => {
            this.addOrUpdateUser(user);
        });
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        this.applyActivityFilter(this.filteredStatuses);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ UI
        this.app.uiManager.updateUserCount(filteredUsers.length);
        
        console.log('–ú–∞—Ä–∫–µ—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ:', this.userMarkers.size);
    }
    
    addOrUpdateUser(user) {
        // –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if (user.id === this.currentUserId) {
            return;
        }
        
        console.log('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name, user.position);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.users.set(user.id, user);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –º–∞—Ä–∫–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (this.userMarkers.has(user.id)) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞—Ä–∫–µ—Ä
            const marker = this.userMarkers.get(user.id);
            marker.setLatLng(user.position);
            marker.setIcon(this.createUserIcon(user.status));
            marker.userStatus = user.status;
            marker.setPopupContent(this.createPopupContent(user));
        } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
            const marker = L.marker(user.position, {
                icon: this.createUserIcon(user.status)
            });
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ø–∞–ø
            marker.bindPopup(this.createPopupContent(user), {
                maxWidth: 200,
                className: 'user-popup-container'
            });
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –º–∞—Ä–∫–µ—Ä–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            marker.userStatus = user.status;
            marker.userId = user.id;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–ª–∞—Å—Ç–µ—Ä
            this.markerClusterGroup.addLayer(marker);
            this.userMarkers.set(user.id, marker);
            
            console.log('–°–æ–∑–¥–∞–Ω –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name);
        }
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä
        this.applyActivityFilter(this.filteredStatuses);
    }
    
    removeUser(userId) {
        console.log('–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        if (this.userMarkers.has(userId)) {
            const marker = this.userMarkers.get(userId);
            this.markerClusterGroup.removeLayer(marker);
            this.userMarkers.delete(userId);
        }
        
        this.users.delete(userId);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
        const userCount = Array.from(this.users.keys()).filter(id => id !== this.currentUserId).length;
        this.app.uiManager.updateUserCount(userCount);
    }
    
    updateUserStatus(userId, status) {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, status);
        
        const user = this.users.get(userId);
        if (user) {
            user.status = status;
            
            if (this.userMarkers.has(userId)) {
                const marker = this.userMarkers.get(userId);
                marker.setIcon(this.createUserIcon(status));
                marker.userStatus = status;
                marker.setPopupContent(this.createPopupContent(user));
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
                this.applyActivityFilter(this.filteredStatuses);
            }
        }
    }
    
    updateUserPosition(userId, position) {
        console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, position);
        
        const user = this.users.get(userId);
        if (user) {
            user.position = position;
            
            if (this.userMarkers.has(userId)) {
                const marker = this.userMarkers.get(userId);
                marker.setLatLng(position);
            }
        }
    }
    
    createUserIcon(status) {
        const iconHtml = this.getUserIcon(status);
        const iconSize = window.innerWidth <= 768 ? [32, 32] : [30, 30];
        
        return L.divIcon({
            className: `user-marker user-${status}`,
            html: iconHtml,
            iconSize: iconSize,
            iconAnchor: [iconSize[0]/2, iconSize[1]/2]
        });
    }
    
    getUser(userId) {
        return this.users.get(userId);
    }
    
    getUserIcon(status) {
        switch (status) {
            case CONFIG.STATUSES.AVAILABLE:
                return '<i class="fas fa-user"></i>';
            case CONFIG.STATUSES.HIKING:
                return '<i class="fas fa-hiking"></i>';
            case CONFIG.STATUSES.TRAVELING:
                return '<i class="fas fa-car"></i>';
            case CONFIG.STATUSES.BUSY:
                return '<i class="fas fa-clock"></i>';
            default:
                return '<i class="fas fa-user"></i>';
        }
    }
    
    getStatusText(status) {
        switch (status) {
            case CONFIG.STATUSES.AVAILABLE:
                return '–î–æ—Å—Ç—É–ø–µ–Ω';
            case CONFIG.STATUSES.HIKING:
                return '–í –ø–æ—Ö–æ–¥–µ';
            case CONFIG.STATUSES.TRAVELING:
                return '–ü—É—Ç–µ—à–µ—Å—Ç–≤—É—é';
            case CONFIG.STATUSES.BUSY:
                return '–ó–∞–Ω—è—Ç';
            default:
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }
    
    createPopupContent(user) {
        return `
            <div class="user-popup">
                <h4>${user.name}</h4>
                <div class="status">${this.getStatusText(user.status)}</div>
                <button onclick="window.adventureSync.openPrivateChat('${user.id}', '${user.name}')">
                    üí¨ –ù–∞–ø–∏—Å–∞—Ç—å
                </button>
                <button onclick="window.adventureSync.createRouteToUser('${user.id}')">
                    üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç
                </button>
            </div>
        `;
    }
    
    applyActivityFilter(statuses) {
        this.filteredStatuses = statuses;
        console.log('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:', statuses);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–∏–¥ –∫–∞—Ä—Ç—ã
        const currentCenter = this.app.mapManager.map.getCenter();
        const currentZoom = this.app.mapManager.map.getZoom();
        
        if (statuses.includes('all')) {
            // –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –º–∞—Ä–∫–µ—Ä—ã
            this.userMarkers.forEach(marker => {
                if (!this.markerClusterGroup.hasLayer(marker)) {
                    this.markerClusterGroup.addLayer(marker);
                }
            });
        } else {
            // –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            this.userMarkers.forEach(marker => {
                if (statuses.includes(marker.userStatus)) {
                    if (!this.markerClusterGroup.hasLayer(marker)) {
                        this.markerClusterGroup.addLayer(marker);
                    }
                } else {
                    if (this.markerClusterGroup.hasLayer(marker)) {
                        this.markerClusterGroup.removeLayer(marker);
                    }
                }
            });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥ –∫–∞—Ä—Ç—ã
        this.app.mapManager.map.setView(currentCenter, currentZoom);
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        let visibleCount = 0;
        this.userMarkers.forEach(marker => {
            if (this.markerClusterGroup.hasLayer(marker)) {
                visibleCount++;
            }
        });
        
        console.log('–í–∏–¥–∏–º—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', visibleCount);
    }
}
