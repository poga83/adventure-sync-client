class MarkerManager {
    constructor(app) {
        this.app = app;
        this.userMarkers = new Map();
        this.users = new Map();
        this.markerClusterGroup = null;
        this.filteredStatuses = ['all'];
        this.currentUserId = null;
    }
    
    initialize(map) {
        console.log('üë• –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MarkerManager...');
        
        const currentUser = this.app.authManager.getCurrentUser();
        if (currentUser) {
            this.currentUserId = currentUser.id;
            console.log('üÜî ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', this.currentUserId);
        }
        
        this.markerClusterGroup = L.markerClusterGroup({
            chunkedLoading: true,
            spiderfyOnMaxZoom: true,
            disableClusteringAtZoom: 15,
            maxClusterRadius: 50,
            zoomToBoundsOnClick: true,
            showCoverageOnHover: false,
            iconCreateFunction: (cluster) => {
                const count = cluster.getChildCount();
                let size = 'small';
                if (count > 10) size = 'medium';
                if (count > 100) size = 'large';
                
                return L.divIcon({
                    html: `<div><span>${count}</span></div>`,
                    className: `marker-cluster marker-cluster-${size}`,
                    iconSize: L.point(40, 40)
                });
            }
        });
        
        map.addLayer(this.markerClusterGroup);
        this.restoreFromCache();
        
        // –£–î–ê–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∑–∞–ø—Ä–æ—Å—É)
        // this.createTestUsers();
        
        console.log('‚úÖ MarkerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        return this.markerClusterGroup;
    }
    
    restoreFromCache() {
        const cachedPositions = localStorage.getItem(CONFIG.CACHE.POSITIONS_KEY);
        if (cachedPositions) {
            try {
                const positions = JSON.parse(cachedPositions);
                console.log('üíæ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞:', positions.length, '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
                positions.forEach(user => {
                    if (user.id !== this.currentUserId) {
                        this.addOrUpdateUser(user);
                    }
                });
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π:', e);
            }
        }
    }
    
    updateUsers(users) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', users.length);
        
        const allUsers = Array.isArray(users) ? users : [];
        localStorage.setItem(CONFIG.CACHE.POSITIONS_KEY, JSON.stringify(allUsers));
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–∞—Ä–∫–µ—Ä—ã (–∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        this.userMarkers.forEach((marker, userId) => {
            if (userId !== this.currentUserId) {
                this.markerClusterGroup.removeLayer(marker);
                this.userMarkers.delete(userId);
            }
        });
        
        const currentUser = this.users.get(this.currentUserId);
        this.users.clear();
        if (currentUser) {
            this.users.set(this.currentUserId, currentUser);
        }
        
        let addedCount = 0;
        allUsers.forEach(user => {
            if (user.id !== this.currentUserId) {
                this.addOrUpdateUser(user);
                addedCount++;
            }
        });
        
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: ${addedCount}, –≤—Å–µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç–µ: ${this.userMarkers.size}`);
        this.applyActivityFilter(this.filteredStatuses);
        
        if (this.app.uiManager) {
            this.app.uiManager.updateUsersCount(addedCount);
        }
    }
    
    addOrUpdateUser(user) {
        if (user.id === this.currentUserId) return;
        
        console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name, user.position);
        
        if (!user.position || !Array.isArray(user.position) || user.position.length !== 2) {
            console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name, user.position);
            return;
        }
        
        this.users.set(user.id, user);
        
        if (this.userMarkers.has(user.id)) {
            const marker = this.userMarkers.get(user.id);
            marker.setLatLng(user.position);
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏
            const newIcon = this.createUserIcon(user.status);
            marker.setIcon(newIcon);
            marker.userStatus = user.status;
            marker.setPopupContent(this.createPopupContent(user));
            console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω –º–∞—Ä–∫–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name);
        } else {
            const marker = L.marker(user.position, {
                icon: this.createUserIcon(user.status)
            });
            
            marker.bindPopup(this.createPopupContent(user), {
                maxWidth: 200,
                className: 'user-popup-container'
            });
            
            marker.userStatus = user.status;
            marker.userId = user.id;
            
            this.markerClusterGroup.addLayer(marker);
            this.userMarkers.set(user.id, marker);
            
            console.log('‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.name);
        }
        
        this.applyActivityFilter(this.filteredStatuses);
    }
    
    removeUser(userId) {
        console.log('‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
        
        if (this.userMarkers.has(userId)) {
            const marker = this.userMarkers.get(userId);
            this.markerClusterGroup.removeLayer(marker);
            this.userMarkers.delete(userId);
        }
        
        this.users.delete(userId);
        
        const userCount = Array.from(this.users.keys()).filter(id => id !== this.currentUserId).length;
        if (this.app.uiManager) {
            this.app.uiManager.updateUsersCount(userCount);
        }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∏–∫–æ–Ω–∫–∏
    updateUserStatus(userId, status) {
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId, status);
        
        const user = this.users.get(userId);
        if (user) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –¥–∞–Ω–Ω—ã—Ö
            user.status = status;
            
            if (this.userMarkers.has(userId)) {
                const marker = this.userMarkers.get(userId);
                
                // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–∫–æ–Ω–∫—É
                const newIcon = this.createUserIcon(status);
                marker.setIcon(newIcon);
                marker.userStatus = status;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ø–∞–ø–∞
                marker.setPopupContent(this.createPopupContent(user));
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                this.applyActivityFilter(this.filteredStatuses);
                
                console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∏ –∏–∫–æ–Ω–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', user.name, status);
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                this.app.notificationManager.showNotification(
                    `${user.name} —Å–º–µ–Ω–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞ ${this.getStatusText(status)}`, 
                    'info'
                );
            }
        } else {
            console.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', userId);
        }
    }
    
    updateUserPosition(userId, position) {
        const user = this.users.get(userId);
        if (user) {
            user.position = position;
            
            if (this.userMarkers.has(userId)) {
                const marker = this.userMarkers.get(userId);
                marker.setLatLng(position);
            }
        }
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª–∞—Å—Å–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    createUserIcon(status) {
        const iconHtml = this.getUserIcon(status);
        const iconSize = [30, 30];
        
        return L.divIcon({
            className: `user-marker user-${status} marker-${status}-${Date.now()}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å
            html: iconHtml,
            iconSize: iconSize,
            iconAnchor: [15, 15]
        });
    }
    
    getUser(userId) {
        return this.users.get(userId);
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    getUserIcon(status) {
        const iconStyle = 'font-size: 16px; color: white;';
        switch (status) {
            case CONFIG.STATUSES.AUTO:
                return `<i class="fas fa-car" style="${iconStyle}"></i>`;
            case CONFIG.STATUSES.MOTO:
                return `<i class="fas fa-motorcycle" style="${iconStyle}"></i>`;
            case CONFIG.STATUSES.WALKING:
                return `<i class="fas fa-walking" style="${iconStyle}"></i>`;
            case CONFIG.STATUSES.BUSY:
                return `<i class="fas fa-clock" style="${iconStyle}"></i>`;
            default:
                return `<i class="fas fa-user" style="${iconStyle}"></i>`;
        }
    }
    
    getStatusText(status) {
        switch (status) {
            case CONFIG.STATUSES.AUTO:
                return '–ê–≤—Ç–æ';
            case CONFIG.STATUSES.MOTO:
                return '–ú–æ—Ç–æ';
            case CONFIG.STATUSES.WALKING:
                return '–ü–µ—à–∫–æ–¥—Ä–∞–ª–∏';
            case CONFIG.STATUSES.BUSY:
                return '–ó–∞–Ω—è—Ç';
            default:
                return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        }
    }
    
    createPopupContent(user) {
        return `
            <div class="user-popup">
                <h4 class="user-popup-name">${user.name}</h4>
                <div class="user-popup-status">${this.getStatusText(user.status)}</div>
                <button onclick="window.adventureSync.openPrivateChat('${user.id}', '${user.name}')" 
                        style="margin: 3px; padding: 6px 10px; background: #64b5f6; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
                    üí¨ –ù–∞–ø–∏—Å–∞—Ç—å
                </button>
                <button onclick="window.adventureSync.mapManager.createRouteToUser('${user.id}')" 
                        style="margin: 3px; padding: 6px 10px; background: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px;">
                    üó∫Ô∏è –ú–∞—Ä—à—Ä—É—Ç
                </button>
            </div>
        `;
    }
    
    applyActivityFilter(statuses) {
        this.filteredStatuses = statuses;
        console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞:', statuses);
        
        const currentCenter = this.app.mapManager.map.getCenter();
        const currentZoom = this.app.mapManager.map.getZoom();
        
        if (statuses.includes('all')) {
            this.userMarkers.forEach(marker => {
                if (!this.markerClusterGroup.hasLayer(marker)) {
                    this.markerClusterGroup.addLayer(marker);
                }
            });
        } else {
            this.userMarkers.forEach(marker => {
                if (statuses.includes(marker.userStatus)) {
                    if (!this.markerClusterGroup.hasLayer(marker)) {
                        this.markerClusterGroup.addLayer(marker);
                    }
                } else {
                    if (this.markerClusterGroup.hasLayer(marker)) {
                        this.markerClusterGroup.removeLayer(marker);
                    }
                }
            });
        }
        
        this.app.mapManager.map.setView(currentCenter, currentZoom);
        
        let visibleCount = 0;
        this.userMarkers.forEach(marker => {
            if (this.markerClusterGroup.hasLayer(marker)) {
                visibleCount++;
            }
        });
        
        console.log('üëÅÔ∏è –í–∏–¥–∏–º—ã—Ö –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏:', visibleCount);
    }
}
