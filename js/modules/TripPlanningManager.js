class TripPlanningManager {
    constructor(app) {
        this.app = app;
        this.trips = new Map();
        this.currentTrip = null;
        this.activeEditor = null;
        this.collaborators = new Map();
        this.mapModal = null;
        this.modalMap = null;
        this.initialize();
    }

    initialize() {
        console.log('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TripPlanningManager...');
        this.loadTripsFromStorage();
        this.createTripPlanningUI();
        this.createMapModal(); // –ù–û–í–´–ô: –°–æ–∑–¥–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∫–∞—Ä—Ç–æ–π
        this.setupEventListeners();
        console.log('‚úÖ TripPlanningManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // –ù–û–í–´–ô: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–µ–∫
    createMapModal() {
        this.mapModal = document.createElement('div');
        this.mapModal.id = 'waypointMapModal';
        this.mapModal.className = 'waypoint-map-modal hidden';
        this.mapModal.innerHTML = `
            <div class="map-modal-content">
                <div class="map-modal-header">
                    <h3><i class="fas fa-map-pin"></i> –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ</h3>
                    <button id="closeMapModal" class="close-btn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="map-modal-body">
                    <div id="waypointMapContainer" class="waypoint-map-container"></div>
                    <div class="map-modal-controls">
                        <div class="search-controls">
                            <input type="text" id="locationSearch" placeholder="–ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ..." class="location-search-input">
                            <button id="searchLocationBtn" class="search-btn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                        <div class="modal-actions">
                            <button id="confirmWaypointBtn" class="action-btn success" disabled>
                                <i class="fas fa-check"></i> –î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É
                            </button>
                            <button id="cancelWaypointBtn" class="action-btn secondary">
                                <i class="fas fa-times"></i> –û—Ç–º–µ–Ω–∞
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(this.mapModal);
    }

    createTripPlanningUI() {
        const tripPlanningPanel = document.createElement('div');
        tripPlanningPanel.id = 'tripPlanningPanel';
        tripPlanningPanel.className = 'trip-planning-panel hidden';
        tripPlanningPanel.innerHTML = `
            <div class="trip-panel-header">
                <h3><i class="fas fa-map-marked-alt"></i> –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫</h3>
                <button id="closeTripPanel" class="close-btn">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            
            <div class="trip-panel-content">
                <!-- –°–ø–∏—Å–æ–∫ –ø–æ–µ–∑–¥–æ–∫ -->
                <div class="trips-section">
                    <div class="section-header">
                        <h4>–ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏</h4>
                        <button id="createTripBtn" class="action-btn primary">
                            <i class="fas fa-plus"></i> –°–æ–∑–¥–∞—Ç—å –ø–æ–µ–∑–¥–∫—É
                        </button>
                    </div>
                    <div id="tripsList" class="trips-list"></div>
                </div>

                <!-- –†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–µ–∑–¥–∫–∏ -->
                <div id="tripEditor" class="trip-editor hidden">
                    <div class="editor-header">
                        <input type="text" id="tripTitle" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏" maxlength="100">
                        <div class="editor-actions">
                            <button id="saveTripBtn" class="action-btn success">
                                <i class="fas fa-save"></i> –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                            </button>
                            <button id="shareTripBtn" class="action-btn info">
                                <i class="fas fa-share"></i> –ü–æ–¥–µ–ª–∏—Ç—å—Å—è
                            </button>
                            <button id="exportTripBtn" class="action-btn secondary">
                                <i class="fas fa-download"></i> –≠–∫—Å–ø–æ—Ä—Ç
                            </button>
                        </div>
                    </div>

                    <div class="trip-details">
                        <div class="trip-meta">
                            <div class="meta-item">
                                <label>–î–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏:</label>
                                <div class="date-range">
                                    <input type="date" id="tripStartDate">
                                    <span>‚Äî</span>
                                    <input type="date" id="tripEndDate">
                                </div>
                            </div>
                            <div class="meta-item">
                                <label>–¢–∏–ø —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞:</label>
                                <select id="tripTransport">
                                    <option value="auto">üöó –ê–≤—Ç–æ–º–æ–±–∏–ª—å</option>
                                    <option value="moto">üèçÔ∏è –ú–æ—Ç–æ—Ü–∏–∫–ª</option>
                                    <option value="walking">üö∂ –ü–µ—à–∫–æ–º</option>
                                    <option value="mixed">üîÑ –°–º–µ—à–∞–Ω–Ω—ã–π</option>
                                </select>
                            </div>
                        </div>

                        <div class="trip-description">
                            <label>–û–ø–∏—Å–∞–Ω–∏–µ:</label>
                            <textarea id="tripDescription" placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏..." maxlength="500"></textarea>
                        </div>
                    </div>

                    <!-- –î–Ω–∏ –ø–æ–µ–∑–¥–∫–∏ -->
                    <div class="trip-days">
                        <div class="days-header">
                            <h4>–ú–∞—Ä—à—Ä—É—Ç –ø–æ –¥–Ω—è–º</h4>
                            <button id="addDayBtn" class="action-btn primary small">
                                <i class="fas fa-plus"></i> –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å
                            </button>
                        </div>
                        <div id="tripDaysList" class="days-list"></div>
                    </div>

                    <!-- –£—á–∞—Å—Ç–Ω–∏–∫–∏ -->
                    <div class="trip-collaborators">
                        <div class="collaborators-header">
                            <h4>–£—á–∞—Å—Ç–Ω–∏–∫–∏</h4>
                            <button id="inviteUserBtn" class="action-btn info small">
                                <i class="fas fa-user-plus"></i> –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å
                            </button>
                        </div>
                        <div id="collaboratorsList" class="collaborators-list"></div>
                    </div>
                </div>
            </div>
        `;

        document.body.appendChild(tripPlanningPanel);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤ header
        const headerControls = document.querySelector('.header-controls');
        const tripPlanningBtn = document.createElement('button');
        tripPlanningBtn.id = 'openTripPlanningBtn';
        tripPlanningBtn.className = 'trip-planning-btn';
        tripPlanningBtn.title = '–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–µ–∑–¥–æ–∫';
        tripPlanningBtn.innerHTML = '<i class="fas fa-map-marked-alt"></i>';
        headerControls.insertBefore(tripPlanningBtn, headerControls.lastElementChild);
    }

    setupEventListeners() {
        // –û—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –ø–∞–Ω–µ–ª–∏
        document.getElementById('openTripPlanningBtn').addEventListener('click', () => {
            this.toggleTripPlanningPanel();
        });

        document.getElementById('closeTripPanel').addEventListener('click', () => {
            this.closeTripPlanningPanel();
        });

        // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–∏
        document.getElementById('createTripBtn').addEventListener('click', () => {
            this.createNewTrip();
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
        document.getElementById('saveTripBtn').addEventListener('click', () => {
            this.saveCurrentTrip();
        });

        // –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–µ–∑–¥–∫–∏
        document.getElementById('exportTripBtn').addEventListener('click', () => {
            this.showExportDialog();
        });

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è
        document.getElementById('addDayBtn').addEventListener('click', () => {
            this.addTripDay();
        });

        // –ù–û–í–´–ô: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ä—Ç—ã
        document.getElementById('closeMapModal').addEventListener('click', () => {
            this.closeMapModal();
        });

        document.getElementById('confirmWaypointBtn').addEventListener('click', () => {
            this.confirmWaypoint();
        });

        document.getElementById('cancelWaypointBtn').addEventListener('click', () => {
            this.closeMapModal();
        });

        document.getElementById('searchLocationBtn').addEventListener('click', () => {
            this.searchLocation();
        });

        document.getElementById('locationSearch').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.searchLocation();
            }
        });

        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        setInterval(() => {
            if (this.currentTrip && this.activeEditor) {
                this.autoSaveTrip();
            }
        }, CONFIG.TRIP_PLANNING.AUTO_SAVE_INTERVAL);
    }

    toggleTripPlanningPanel() {
        const panel = document.getElementById('tripPlanningPanel');
        if (panel.classList.contains('hidden')) {
            this.openTripPlanningPanel();
        } else {
            this.closeTripPlanningPanel();
        }
    }

    openTripPlanningPanel() {
        const panel = document.getElementById('tripPlanningPanel');
        panel.classList.remove('hidden');
        this.refreshTripsList();
        this.app.notificationManager.showNotification('–û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–Ω–µ–ª—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫');
    }

    closeTripPlanningPanel() {
        const panel = document.getElementById('tripPlanningPanel');
        panel.classList.add('hidden');
        
        if (this.activeEditor) {
            this.closeEditor();
        }
    }

    createNewTrip() {
        const trip = {
            id: this.generateTripId(),
            title: '–ù–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞',
            description: '',
            startDate: new Date().toISOString().split('T')[0],
            endDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
            transport: 'auto',
            days: [this.createTripDay(1)],
            collaborators: [this.app.authManager.getCurrentUser().id],
            waypoints: [],
            routes: [],
            createdBy: this.app.authManager.getCurrentUser().id,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
        };

        this.trips.set(trip.id, trip);
        this.openTripEditor(trip);
        this.app.notificationManager.showNotification('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –ø–æ–µ–∑–¥–∫–∞');
    }

    openTripEditor(trip) {
        this.currentTrip = trip;
        this.activeEditor = trip.id;

        document.getElementById('tripEditor').classList.remove('hidden');

        document.getElementById('tripTitle').value = trip.title;
        document.getElementById('tripDescription').value = trip.description;
        document.getElementById('tripStartDate').value = trip.startDate;
        document.getElementById('tripEndDate').value = trip.endDate;
        document.getElementById('tripTransport').value = trip.transport;

        this.renderTripDays();
        this.renderCollaborators();
    }

    createTripDay(dayNumber) {
        return {
            id: this.generateDayId(),
            day: dayNumber,
            title: `–î–µ–Ω—å ${dayNumber}`,
            description: '',
            waypoints: [],
            routes: [],
            accommodation: null,
            notes: ''
        };
    }

    addTripDay() {
        if (!this.currentTrip) return;

        const dayNumber = this.currentTrip.days.length + 1;
        const newDay = this.createTripDay(dayNumber);
        
        this.currentTrip.days.push(newDay);
        this.renderTripDays();
        
        this.app.notificationManager.showNotification(`–î–æ–±–∞–≤–ª–µ–Ω –¥–µ–Ω—å ${dayNumber}`);
    }

    renderTripDays() {
        const daysList = document.getElementById('tripDaysList');
        daysList.innerHTML = '';

        this.currentTrip.days.forEach((day, index) => {
            const dayElement = document.createElement('div');
            dayElement.className = 'trip-day';
            dayElement.innerHTML = `
                <div class="day-header">
                    <div class="day-info">
                        <h5>–î–µ–Ω—å ${day.day}</h5>
                        <input type="text" class="day-title" value="${day.title}" 
                               onchange="window.adventureSync.tripPlanningManager.updateDayTitle(${index}, this.value)">
                    </div>
                    <div class="day-actions">
                        <button onclick="window.adventureSync.tripPlanningManager.addWaypoint(${index})" 
                                class="action-btn small info" title="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ—á–∫—É">
                            <i class="fas fa-map-pin"></i>
                        </button>
                        <button onclick="window.adventureSync.tripPlanningManager.removeDay(${index})" 
                                class="action-btn small danger" title="–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å">
                            <i class="fas fa-trash"></i>
                        </button>
                    </div>
                </div>
                <div class="day-content">
                    <div class="waypoints-list" id="waypoints-${index}">
                        ${this.renderWaypoints(day.waypoints, index)}
                    </div>
                    <textarea class="day-notes" placeholder="–ó–∞–º–µ—Ç–∫–∏ –Ω–∞ –¥–µ–Ω—å..." 
                              onchange="window.adventureSync.tripPlanningManager.updateDayNotes(${index}, this.value)">${day.notes}</textarea>
                </div>
            `;
            daysList.appendChild(dayElement);
        });
    }

    renderWaypoints(waypoints, dayIndex) {
        return waypoints.map((waypoint, wpIndex) => `
            <div class="waypoint-item">
                <div class="waypoint-marker">
                    <i class="fas fa-map-pin"></i>
                </div>
                <div class="waypoint-content">
                    <input type="text" class="waypoint-name" value="${waypoint.name}" 
                           onchange="window.adventureSync.tripPlanningManager.updateWaypointName(${dayIndex}, ${wpIndex}, this.value)">
                    <div class="waypoint-meta">
                        <span class="coordinates">${waypoint.lat.toFixed(6)}, ${waypoint.lng.toFixed(6)}</span>
                        <button onclick="window.adventureSync.tripPlanningManager.removeWaypoint(${dayIndex}, ${wpIndex})" 
                                class="remove-waypoint" title="–£–¥–∞–ª–∏—Ç—å —Ç–æ—á–∫—É">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            </div>
        `).join('');
    }

    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å –∫–∞—Ä—Ç–æ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–æ—á–∫–∏
    addWaypoint(dayIndex) {
        if (!this.currentTrip) return;

        this.currentDayIndex = dayIndex;
        this.selectedWaypoint = null;

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        this.mapModal.classList.remove('hidden');
        this.app.notificationManager.showNotification('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ –∏–ª–∏ –Ω–∞–π–¥–∏—Ç–µ –º–µ—Å—Ç–æ');

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
        setTimeout(() => {
            this.initializeModalMap();
        }, 100);
    }

    // –ù–û–í–´–ô: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
    initializeModalMap() {
        const mapContainer = document.getElementById('waypointMapContainer');
        
        if (this.modalMap) {
            this.modalMap.remove();
        }

        try {
            this.modalMap = L.map('waypointMapContainer', {
                zoomControl: true,
                attributionControl: true
            }).setView(CONFIG.MAP.DEFAULT_CENTER, CONFIG.MAP.DEFAULT_ZOOM);

            L.tileLayer(CONFIG.MAP.TILE_LAYER, {
                attribution: CONFIG.MAP.ATTRIBUTION,
                maxZoom: CONFIG.MAP.MAX_ZOOM
            }).addTo(this.modalMap);

            // –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –Ω–∞ –Ω–µ–º
            if (this.app.mapManager.userLocationMarker) {
                const userPos = this.app.mapManager.userLocationMarker.getLatLng();
                this.modalMap.setView(userPos, 12);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
            this.modalMap.on('click', (e) => {
                this.selectWaypointLocation(e.latlng);
            });

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∫–∞—Ä—Ç—ã
            setTimeout(() => {
                this.modalMap.invalidateSize();
            }, 200);

            console.log('‚úÖ –ú–æ–¥–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã:', error);
            this.app.notificationManager.showNotification('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç—ã', 'error');
        }
    }

    // –ù–û–í–´–ô: –í—ã–±–æ—Ä –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
    selectWaypointLocation(latlng) {
        this.selectedWaypoint = {
            lat: latlng.lat,
            lng: latlng.lng,
            name: `–¢–æ—á–∫–∞ ${this.currentTrip.days[this.currentDayIndex].waypoints.length + 1}`
        };

        // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–∞—Ä–∫–µ—Ä
        if (this.tempWaypointMarker) {
            this.modalMap.removeLayer(this.tempWaypointMarker);
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä–∫–µ—Ä
        this.tempWaypointMarker = L.marker(latlng, {
            icon: L.divIcon({
                className: 'temp-waypoint-marker',
                html: '<i class="fas fa-map-pin" style="color: #00BCD4; font-size: 20px;"></i>',
                iconSize: [30, 30],
                iconAnchor: [15, 30]
            })
        }).addTo(this.modalMap);

        // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        document.getElementById('confirmWaypointBtn').disabled = false;

        console.log('üìç –í—ã–±—Ä–∞–Ω–∞ —Ç–æ—á–∫–∞:', latlng);
    }

    // –ù–û–í–´–ô: –ü–æ–∏—Å–∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    async searchLocation() {
        const query = document.getElementById('locationSearch').value.trim();
        if (!query) {
            this.app.notificationManager.showNotification('–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –¥–ª—è –ø–æ–∏—Å–∫–∞', 'warning');
            return;
        }

        try {
            // –ü—Ä–æ—Å—Ç–æ–π –≥–µ–æ–∫–æ–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ Nominatim (OpenStreetMap)
            const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=1`);
            const results = await response.json();

            if (results.length > 0) {
                const result = results[0];
                const lat = parseFloat(result.lat);
                const lng = parseFloat(result.lon);

                this.modalMap.setView([lat, lng], 14);
                this.selectWaypointLocation({ lat, lng });

                // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ—á–∫–∏
                this.selectedWaypoint.name = result.display_name.split(',')[0];
                this.app.notificationManager.showNotification('–ú–µ—Å—Ç–æ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–µ', 'success');
            } else {
                this.app.notificationManager.showNotification('–ú–µ—Å—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ', 'error');
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞:', error);
            this.app.notificationManager.showNotification('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç–∞', 'error');
        }
    }

    // –ù–û–í–´–ô: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ—á–∫–∏
    confirmWaypoint() {
        if (!this.selectedWaypoint) return;

        const waypoint = {
            id: this.generateWaypointId(),
            name: this.selectedWaypoint.name,
            lat: this.selectedWaypoint.lat,
            lng: this.selectedWaypoint.lng,
            description: '',
            type: 'waypoint'
        };

        this.currentTrip.days[this.currentDayIndex].waypoints.push(waypoint);
        this.renderTripDays();

        // –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ä—Ç—É
        this.addWaypointToMainMap(waypoint, this.currentDayIndex);

        this.closeMapModal();
        this.app.notificationManager.showNotification('–¢–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    // –ù–û–í–´–ô: –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–∞—Ä—Ç—ã
    closeMapModal() {
        this.mapModal.classList.add('hidden');
        
        if (this.modalMap) {
            this.modalMap.remove();
            this.modalMap = null;
        }

        this.selectedWaypoint = null;
        this.currentDayIndex = null;

        // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –ø–æ–∏—Å–∫–∞
        document.getElementById('locationSearch').value = '';
        document.getElementById('confirmWaypointBtn').disabled = true;
    }

    addWaypointToMainMap(waypoint, dayIndex) {
        if (!this.app.mapManager.map) return;

        const marker = L.marker([waypoint.lat, waypoint.lng], {
            icon: L.divIcon({
                className: 'trip-waypoint-marker',
                html: `<div class="waypoint-number">${this.currentTrip.days[dayIndex].waypoints.length}</div>`,
                iconSize: [30, 30],
                iconAnchor: [15, 15]
            })
        }).addTo(this.app.mapManager.map);

        marker.bindPopup(`
            <div class="waypoint-popup">
                <h4>${waypoint.name}</h4>
                <p>–î–µ–Ω—å ${dayIndex + 1}</p>
                <button onclick="window.adventureSync.tripPlanningManager.editWaypoint('${waypoint.id}')" 
                        style="margin-top: 5px; padding: 5px 10px; background: #2196F3; color: white; border: none; border-radius: 3px; cursor: pointer;">
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                </button>
            </div>
        `);

        waypoint.marker = marker;
    }

    renderCollaborators() {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        const collaboratorsList = document.getElementById('collaboratorsList');
        collaboratorsList.innerHTML = '<p style="color: var(--text-secondary); font-style: italic;">–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p>';
    }

    saveCurrentTrip() {
        if (!this.currentTrip) return;

        this.currentTrip.title = document.getElementById('tripTitle').value;
        this.currentTrip.description = document.getElementById('tripDescription').value;
        this.currentTrip.startDate = document.getElementById('tripStartDate').value;
        this.currentTrip.endDate = document.getElementById('tripEndDate').value;
        this.currentTrip.transport = document.getElementById('tripTransport').value;
        this.currentTrip.updatedAt = new Date().toISOString();

        this.saveTripsToStorage();
        this.syncTripToServer(this.currentTrip);

        this.app.notificationManager.showNotification('–ü–æ–µ–∑–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'success');
    }

    showExportDialog() {
        if (!this.currentTrip) return;

        const modal = document.createElement('div');
        modal.className = 'export-modal';
        modal.innerHTML = `
            <div class="modal-content">
                <div class="modal-header">
                    <h3>–≠–∫—Å–ø–æ—Ä—Ç –ø–æ–µ–∑–¥–∫–∏</h3>
                    <button onclick="this.parentElement.parentElement.parentElement.remove()" class="close-btn">
                        <i class="fas fa-times"></i>
                    </button>
                </div>
                <div class="modal-body">
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:</p>
                    <div class="export-options">
                        <button onclick="window.adventureSync.tripPlanningManager.exportTrip('gpx')" class="export-btn">
                            <i class="fas fa-map"></i> GPX —Ñ–∞–π–ª
                        </button>
                        <button onclick="window.adventureSync.tripPlanningManager.exportTrip('kml')" class="export-btn">
                            <i class="fas fa-globe"></i> KML —Ñ–∞–π–ª
                        </button>
                        <button onclick="window.adventureSync.tripPlanningManager.exportTrip('json')" class="export-btn">
                            <i class="fas fa-code"></i> JSON –¥–∞–Ω–Ω—ã–µ
                        </button>
                    </div>
                </div>
            </div>
        `;
        document.body.appendChild(modal);
    }

    exportTrip(format) {
        if (!this.currentTrip) return;

        let content, filename, mimeType;

        switch (format) {
            case 'gpx':
                content = this.generateGPX(this.currentTrip);
                filename = `${this.currentTrip.title}.gpx`;
                mimeType = 'application/gpx+xml';
                break;
            case 'kml':
                content = this.generateKML(this.currentTrip);
                filename = `${this.currentTrip.title}.kml`;
                mimeType = 'application/vnd.google-earth.kml+xml';
                break;
            case 'json':
                content = JSON.stringify(this.currentTrip, null, 2);
                filename = `${this.currentTrip.title}.json`;
                mimeType = 'application/json';
                break;
        }

        const blob = new Blob([content], { type: mimeType });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = filename;
        a.click();
        URL.revokeObjectURL(url);

        document.querySelector('.export-modal').remove();

        this.app.notificationManager.showNotification(`–ü–æ–µ–∑–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${format.toUpperCase()}`, 'success');
    }

    generateGPX(trip) {
        let gpx = `<?xml version="1.0" encoding="UTF-8"?>
<gpx version="1.1" creator="Adventure Sync" xmlns="http://www.topografix.com/GPX/1/1">
  <metadata>
    <name>${trip.title}</name>
    <desc>${trip.description}</desc>
    <time>${trip.createdAt}</time>
  </metadata>
`;

        trip.days.forEach((day, dayIndex) => {
            if (day.waypoints.length > 0) {
                gpx += `  <trk>
    <name>–î–µ–Ω—å ${day.day}: ${day.title}</name>
    <desc>${day.notes}</desc>
    <trkseg>
`;
                day.waypoints.forEach(waypoint => {
                    gpx += `      <trkpt lat="${waypoint.lat}" lon="${waypoint.lng}">
        <name>${waypoint.name}</name>
        <desc>${waypoint.description || ''}</desc>
      </trkpt>
`;
                });
                gpx += `    </trkseg>
  </trk>
`;
            }
        });

        gpx += '</gpx>';
        return gpx;
    }

    generateKML(trip) {
        let kml = `<?xml version="1.0" encoding="UTF-8"?>
<kml xmlns="http://www.opengis.net/kml/2.2">
  <Document>
    <name>${trip.title}</name>
    <description>${trip.description}</description>
`;

        trip.days.forEach((day, dayIndex) => {
            if (day.waypoints.length > 0) {
                kml += `    <Folder>
      <name>–î–µ–Ω—å ${day.day}: ${day.title}</name>
      <description>${day.notes}</description>
`;
                day.waypoints.forEach((waypoint, wpIndex) => {
                    kml += `      <Placemark>
        <name>${waypoint.name}</name>
        <description>${waypoint.description || ''}</description>
        <Point>
          <coordinates>${waypoint.lng},${waypoint.lat},0</coordinates>
        </Point>
      </Placemark>
`;
                });
                kml += `    </Folder>
`;
            }
        });

        kml += `  </Document>
</kml>`;
        return kml;
    }

    refreshTripsList() {
        const tripsList = document.getElementById('tripsList');
        tripsList.innerHTML = '';

        if (this.trips.size === 0) {
            tripsList.innerHTML = '<p class="no-trips">–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–µ–∑–¥–æ–∫</p>';
            return;
        }

        this.trips.forEach(trip => {
            const tripElement = document.createElement('div');
            tripElement.className = 'trip-item';
            tripElement.innerHTML = `
                <div class="trip-info">
                    <h4>${trip.title}</h4>
                    <p class="trip-dates">${trip.startDate} ‚Äî ${trip.endDate}</p>
                    <p class="trip-days">${trip.days.length} –¥–Ω–µ–π</p>
                </div>
                <div class="trip-actions">
                    <button onclick="window.adventureSync.tripPlanningManager.openTripEditor(window.adventureSync.tripPlanningManager.trips.get('${trip.id}'))" 
                            class="action-btn primary small">–û—Ç–∫—Ä—ã—Ç—å</button>
                    <button onclick="window.adventureSync.tripPlanningManager.deleteTrip('${trip.id}')" 
                            class="action-btn danger small">–£–¥–∞–ª–∏—Ç—å</button>
                </div>
            `;
            tripsList.appendChild(tripElement);
        });
    }

    // Utility methods
    generateTripId() {
        return 'trip_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    generateDayId() {
        return 'day_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    generateWaypointId() {
        return 'wp_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    loadTripsFromStorage() {
        const stored = localStorage.getItem(CONFIG.CACHE.TRIPS_KEY);
        if (stored) {
            try {
                const tripsArray = JSON.parse(stored);
                tripsArray.forEach(trip => {
                    this.trips.set(trip.id, trip);
                });
                console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.trips.size} –ø–æ–µ–∑–¥–æ–∫ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞`);
            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–µ–∑–¥–æ–∫:', e);
            }
        }
    }

    saveTripsToStorage() {
        try {
            const tripsArray = Array.from(this.trips.values());
            localStorage.setItem(CONFIG.CACHE.TRIPS_KEY, JSON.stringify(tripsArray));
            console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${tripsArray.length} –ø–æ–µ–∑–¥–æ–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ`);
        } catch (e) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–µ–∑–¥–æ–∫:', e);
        }
    }

    syncTripToServer(trip) {
        if (this.app.connectionManager && this.app.connectionManager.socket && this.app.connectionManager.socket.connected) {
            this.app.connectionManager.socket.emit('syncTrip', trip);
            console.log('üì§ –ü–æ–µ–∑–¥–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
        }
    }

    autoSaveTrip() {
        if (this.currentTrip) {
            this.saveTripsToStorage();
        }
    }

    closeEditor() {
        this.activeEditor = null;
        this.currentTrip = null;
        document.getElementById('tripEditor').classList.add('hidden');
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    updateDayTitle(dayIndex, title) {
        if (this.currentTrip && this.currentTrip.days[dayIndex]) {
            this.currentTrip.days[dayIndex].title = title;
        }
    }

    updateDayNotes(dayIndex, notes) {
        if (this.currentTrip && this.currentTrip.days[dayIndex]) {
            this.currentTrip.days[dayIndex].notes = notes;
        }
    }

    updateWaypointName(dayIndex, waypointIndex, name) {
        if (this.currentTrip && this.currentTrip.days[dayIndex] && this.currentTrip.days[dayIndex].waypoints[waypointIndex]) {
            this.currentTrip.days[dayIndex].waypoints[waypointIndex].name = name;
        }
    }

    removeDay(dayIndex) {
        if (this.currentTrip && confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –¥–µ–Ω—å?')) {
            this.currentTrip.days.splice(dayIndex, 1);
            this.currentTrip.days.forEach((day, index) => {
                day.day = index + 1;
            });
            this.renderTripDays();
            this.app.notificationManager.showNotification('–î–µ–Ω—å —É–¥–∞–ª–µ–Ω');
        }
    }

    removeWaypoint(dayIndex, waypointIndex) {
        if (this.currentTrip && this.currentTrip.days[dayIndex]) {
            const waypoint = this.currentTrip.days[dayIndex].waypoints[waypointIndex];
            
            if (waypoint.marker) {
                this.app.mapManager.map.removeLayer(waypoint.marker);
            }
            
            this.currentTrip.days[dayIndex].waypoints.splice(waypointIndex, 1);
            this.renderTripDays();
        }
    }

    deleteTrip(tripId) {
        if (confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø–æ–µ–∑–¥–∫—É? –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            this.trips.delete(tripId);
            this.saveTripsToStorage();
            this.refreshTripsList();
            
            if (this.activeEditor === tripId) {
                this.closeEditor();
            }
            
            this.app.notificationManager.showNotification('–ü–æ–µ–∑–¥–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
        }
    }
}
